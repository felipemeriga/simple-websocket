name: Raptor Prod Service Deploy (Multi-Region)

env:
  GH_USER: ${{ secrets.ACCESS_TOKEN_USER }}
  GH_SECRET: ${{ secrets.ACCESS_TOKEN_SECRET }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TERRAFORM_VERSION: 1.7.2
  SERVICE_NAME: 'lc3-communication'
  # api or tools
  CLUSTER_TYPE: 'tools'
  ENVIRONMENT: 'prod'

concurrency:
  group: raptor-lc3-communication-prod-${{ github.ref }}

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
    - prod

jobs:
  global-infra:
    strategy:
      matrix:
        # NOTE: global infra region matrix should always be ue1 only
        region: ["us-east-1"]
         # DO NOT CHANGE
        bu: ["raptor"]
    environment: prod
    runs-on: ubuntu-latest
    env:
      TF_DIR: terraform/global
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      - uses: de-vri-es/setup-git-credentials@v2
        with:
          credentials: https://${{ secrets.ACCESS_TOKEN_USER }}:${{ secrets.ACCESS_TOKEN_SECRET }}@github.com/
      - name: Terraform Format
        id: fmt
        run: terraform -chdir=${{ env.TF_DIR }} fmt -check
        continue-on-error: true
      - name: Write TF Backend
        uses: DamianReeves/write-file-action@master
        with:
          path: ${{ env.TF_DIR }}/backend.tfbackend
          contents: |
            bucket         = "tf-state-${{ matrix.bu }}-${{ env.ENVIRONMENT }}-${{ matrix.region }}"
            dynamodb_table = "tf-state-${{ matrix.bu }}-${{ env.ENVIRONMENT }}-${{ matrix.region }}-lock"
            key            = "${{ env.SERVICE_NAME }}/${{ env.CLUSTER_TYPE }}/global.tfstate"
            region         = "${{ matrix.region }}"
            encrypt        = true
          write-mode: overwrite
      - name: Write TF Vars
        uses: DamianReeves/write-file-action@master
        with:
          path: ${{ env.TF_DIR }}/vars.tfvars
          contents: |
            service_name = "${{ env.SERVICE_NAME }}"
            env          = "${{ env.ENVIRONMENT }}"
            bu           = "${{ matrix.bu }}"
            type         = "${{ env.CLUSTER_TYPE }}"
          write-mode: overwrite
      - name: Terraform Init
        id: init
        run: terraform -chdir=${{ env.TF_DIR }} init -backend-config=backend.tfbackend
      - name: Terraform Validate
        id: validate
        run: terraform -chdir=${{ env.TF_DIR }} validate -no-color
      - name: Terraform Plan (PR Open/Sync)
        id: plan
        run: terraform -chdir=${{ env.TF_DIR }} plan -no-color -var-file=vars.tfvars
      - name: Terraform Apply (PR Merge)
        if: github.event.pull_request.merged == true
        id: apply
        run: terraform -chdir=${{ env.TF_DIR }} apply -no-color -var-file=vars.tfvars -auto-approve -compact-warnings

  regional-infra:
    strategy:
      matrix:
        region: ['us-west-2']
         # DO NOT CHANGE
        bu: ["raptor"]
    environment: prod
    runs-on: ubuntu-latest
    env:
      TF_DIR: terraform/regional
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      - uses: de-vri-es/setup-git-credentials@v2
        with:
          credentials: https://${{ secrets.ACCESS_TOKEN_USER }}:${{ secrets.ACCESS_TOKEN_SECRET }}@github.com/
      - name: Terraform Format
        id: fmt
        run: terraform -chdir=${{ env.TF_DIR }} fmt -check
        continue-on-error: true
      - name: Write TF Backend
        uses: DamianReeves/write-file-action@master
        with:
          path: ${{ env.TF_DIR }}/backend.tfbackend
          contents: |
            bucket         = "tf-state-${{ matrix.bu }}-${{ env.ENVIRONMENT }}-${{ matrix.region }}"
            dynamodb_table = "tf-state-${{ matrix.bu }}-${{ env.ENVIRONMENT }}-${{ matrix.region }}-lock"
            key            = "${{ env.SERVICE_NAME }}/${{ env.CLUSTER_TYPE }}/regional.tfstate"
            region         = "${{ matrix.region }}"
            encrypt        = true
          write-mode: overwrite
      - name: Write TF Vars
        uses: DamianReeves/write-file-action@master
        with:
          path: ${{ env.TF_DIR }}/vars.tfvars
          contents: |
            region       = "${{ matrix.region }}"
            service_name = "${{ env.SERVICE_NAME }}"
            env          = "${{ env.ENVIRONMENT }}"
            bu           = "${{ matrix.bu }}"
            type         = "${{ env.CLUSTER_TYPE }}"
          write-mode: overwrite
      - name: Terraform Init
        id: init
        run: terraform -chdir=${{ env.TF_DIR }} init -backend-config=backend.tfbackend
      - name: Terraform Validate
        id: validate
        run: terraform -chdir=${{ env.TF_DIR }} validate -no-color
      - name: Terraform Plan (PR Open/Sync)
        id: plan
        run: terraform -chdir=${{ env.TF_DIR }} plan -no-color -var-file=vars.tfvars
      - name: Terraform Apply (PR Merge)
        if: github.event.pull_request.merged == true
        id: apply
        run: terraform -chdir=${{ env.TF_DIR }} apply -no-color -var-file=vars.tfvars -auto-approve -compact-warnings

  build-image:
    strategy:
      matrix:
         # DO NOT CHANGE
        bu: ["raptor"]
    needs: [regional-infra]
    environment: prod
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.create-tag.outputs.new_tag }}
    steps:
      - uses: actions/checkout@v4
      - name: Create Tag
        id: create-tag
        run: echo "new_tag=$(echo $GITHUB_HEAD_REF | sed 's/.*release-//')" >> "$GITHUB_OUTPUT"
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          image: tonistiigi/binfmt:master
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Configure AWS Credentials - us-east-1
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"
      - name: Login to Amazon ECR - us-east-1
        id: login-ecr-east
        uses: aws-actions/amazon-ecr-login@v1
      - name: Configure AWS Credentials - us-west-2
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-west-2"
      - name: Login to Amazon ECR - us-west-2
        id: login-ecr-west
        uses: aws-actions/amazon-ecr-login@v1
      - name: Private repo access config
        uses: DamianReeves/write-file-action@master
        with:
          path: .netrc
          contents: |
            machine github.com
            login ${{ secrets.ACCESS_TOKEN_USER }}
            password ${{ secrets.ACCESS_TOKEN_SECRET }}

            machine api.github.com
            login ${{ secrets.ACCESS_TOKEN_USER }}
            password ${{ secrets.ACCESS_TOKEN_SECRET }}
          write-mode: overwrite
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        env:
          REGISTRY_EAST: ${{ steps.login-ecr-east.outputs.registry }}
          REGISTRY_WEST: ${{ steps.login-ecr-west.outputs.registry }}
          REPOSITORY: fox-digitalvideo/${{ env.SERVICE_NAME }}
        with:
          images: |
            ${{ env.REGISTRY_EAST }}/${{ env.REPOSITORY }}
            ${{ env.REGISTRY_WEST }}/${{ env.REPOSITORY }}
          tags: |
            ${{ steps.create-tag.outputs.new_tag }}
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64
          secret-files: |
            "netrc=./.netrc"
          push: ${{ github.event.pull_request.merged || 'false' }}
          tags: |
            ${{ steps.meta.outputs.tags }}

  service:
    strategy:
      matrix:
        region: ['us-west-2']
         # DO NOT CHANGE
        bu: ["raptor"]
    needs: [build-image, global-infra, regional-infra]
    environment: prod
    runs-on: ubuntu-latest
    env:
      TF_DIR: terraform/service
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ matrix.region }}
      - name: Generate State Bucket Name
        id: state
        run: |
          echo "bucket=tf-state-${{ matrix.bu }}-${{ env.ENVIRONMENT }}-${{ matrix.region }}" >> "$GITHUB_OUTPUT"
      - name: Setup Dynamic Terraform Config
        id: tf-config
        run: |
          echo "backend=-backend-config=region=${{ matrix.region }} -backend-config=bucket=${{ steps.state.outputs.bucket }} -backend-config=dynamodb_table=${{ steps.state.outputs.bucket }}-lock -backend-config=key=${{ env.SERVICE_NAME }}/${{ env.CLUSTER_TYPE }}/service.tfstate" >> "$GITHUB_OUTPUT"
          echo "args=-var region=${{ matrix.region }} -var env=${{ env.ENVIRONMENT }} -var bu=${{ matrix.bu }} -var service_name=${{ env.SERVICE_NAME }} -var service_version=${{ needs.build-image.outputs.version }} -var type=${{ env.CLUSTER_TYPE }}" >> "$GITHUB_OUTPUT"
      - name: Terraform Plan (PR Open/Sync)
        uses: aws-actions/aws-codebuild-run-build@v1
        env:
          TF_CMD: plan
          TF_BACKEND: ${{ steps.tf-config.outputs.backend }}
          TF_ARGS: ${{ steps.tf-config.outputs.args }}
        with:
          project-name: terraformer-${{ env.CLUSTER_TYPE }}-${{ env.ENVIRONMENT }}
          env-vars-for-codebuild: |
            TF_CMD,
            TF_BACKEND,
            TF_ARGS,
            TF_DIR
      - name: Terraform Apply (PR Merge)
        if: github.event.pull_request.merged == true
        uses: aws-actions/aws-codebuild-run-build@v1
        env:
          TF_CMD: apply
          TF_BACKEND: ${{ steps.tf-config.outputs.backend }}
          TF_ARGS: ${{ steps.tf-config.outputs.args }}
        with:
          project-name: terraformer-${{ env.CLUSTER_TYPE }}-${{ env.ENVIRONMENT }}
          env-vars-for-codebuild: |
            TF_CMD,
            TF_BACKEND,
            TF_ARGS,
            TF_DIR

